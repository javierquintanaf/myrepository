#include <cs50.h>
#include <stdio.h>
#include <string.h>

// Max number of candidates
#define MAX 9

// preferences[i][j] is number of voters who prefer i over j
int preferences[MAX][MAX];

// locked[i][j] means i is locked in over j
bool locked[MAX][MAX];

// Each pair has a winner, loser
typedef struct
{
    int winner;
    int loser;
}
pair;

// Array of candidates
string candidates[MAX];
pair pairs[MAX * (MAX - 1) / 2];

int pair_count;
int candidate_count;

// Function prototypes
bool vote(int rank, string name, int ranks[]);
void record_preferences(int ranks[]);
void add_pairs(void);
void sort_pairs(void);
void lock_pairs(void);
void print_winner(void);

int main(int argc, string argv[])
{
    // Check for invalid usage
    if (argc < 2)
    {
        printf("Usage: tideman [candidate ...]\n");
        return 1;
    }

    // Populate array of candidates
    candidate_count = argc - 1;
    if (candidate_count > MAX)
    {
        printf("Maximum number of candidates is %i\n", MAX);
        return 2;
    }
    for (int i = 0; i < candidate_count; i++)
    {
        candidates[i] = argv[i + 1];
    }

    //PRINT TEST
    printf("%s %s %s \n", candidates[0], candidates[1], candidates[2]);

    // Clear graph of locked in pairs
    for (int i = 0; i < candidate_count; i++)
    {
        for (int j = 0; j < candidate_count; j++)
        {
            locked[i][j] = false;
        }
    }

    pair_count = 0;
    int voter_count = get_int("Number of voters: ");

    // Query for votes
    for (int i = 0; i < voter_count; i++)
    {
        // ranks[i] is voter's ith preference
        int ranks[candidate_count];

        // Query for each rank
        for (int j = 0; j < candidate_count; j++)
        {
            string name = get_string("Rank %i: ", j + 1);

            if (!vote(j, name, ranks))
            {
                printf("Invalid vote.\n");
                return 3;
            }
        }
        //PRINT TEST
        //printf("%i %i %i \n",ranks[0], ranks[1], ranks[2]);


        record_preferences(ranks);
        //PRINT TEST
        //printf("%i %i %i \n",preferences[0][0], preferences[0][1], preferences[0][2]);
        //printf("%i %i %i \n",preferences[1][0], preferences[1][1], preferences[1][2]);
        //printf("%i %i %i \n",preferences[2][0], preferences[2][1], preferences[2][2]);

        printf("\n");
    }

    add_pairs();
    //PRINT TEST
    //printf("%i %i \n",pairs[0].winner, pairs[0].loser);
    //printf("%i %i \n",pairs[1].winner, pairs[1].loser);
    //printf("%i %i \n",pairs[2].winner, pairs[2].loser);

    sort_pairs();

    //PRINT TEST
    //printf("%i %i \n",pairs[0].winner, pairs[0].loser);
    //printf("%i %i \n",pairs[1].winner, pairs[1].loser);
    //printf("%i %i \n",pairs[2].winner, pairs[2].loser);

    lock_pairs();
    print_winner();
    return 0;
}

// Update ranks given a new vote
bool vote(int rank, string name, int ranks[])
{
        for (int i = 0; i < candidate_count; i++)
        {
            if (strcmp (name, candidates[i]) == 0)
            {
                ranks[i] = rank;
                return true;
            }
        }
    return false;
}

// Update preferences given one voter's ranks
void record_preferences(int ranks[])
{
    int temp[MAX][MAX];

    for (int i = 0; i < candidate_count; i++)
    {
        for (int j = 0; j < candidate_count; j++)
        {
            if (ranks[i] < ranks[j])
            {
                temp[i][j] = 1;
                preferences[i][j] = temp[i][j] + preferences[i][j];
            }
        }
    }
    return;
}

// Record pairs of candidates where one is preferred over the other
void add_pairs(void)
{
    int k = 0;
    for(int i = 0; i < candidate_count; i++)
    {
        for(int j = 0; j < candidate_count; j++)
        {

            if (preferences[i][j] > preferences[j][i])
            {
                pairs[k].winner = i;
                pairs[k].loser = j;
                k++;
            }
        }
    }
    return;
}

// Sort pairs in decreasing order by strength of victory
void sort_pairs(void)
{

for (int j = 0; j < candidate_count; j++)
    {
        for (int i = 0; i < candidate_count; i++)
        {
            if (preferences[pairs[i].winner][pairs[i].loser] < preferences[pairs[i + 1].winner][pairs[i + 1].loser])
            {
                int temp1[0];
                temp1[0] = pairs[i].winner;
                pairs[i].winner = pairs[i + 1].winner;
                pairs[i + 1].winner = temp1[0];

                int temp2[0];
                temp2[0] = pairs[i].loser;
                pairs[i].loser = pairs[i + 1].loser;
                pairs[i + 1].loser = temp2[0];
            }
        }
    }
return;
}

// Lock pairs into the candidate graph in order, without creating cycles
void lock_pairs(void)
{
    for(int i = 0; i < candidate_count - 1; i++)
    {
    locked[pairs[i].winner][pairs[i].loser] = true;
    }
    return;
}

// Print the winner of the election
void print_winner(void)
{
    for (int i = 0; i < candidate_count; i++)
    {
        if (locked[pairs[i].winner][pairs[i].loser] == false)
        {
            printf("%s\n", candidates[pairs[i].winner]);
        }
    }
    return;
}
